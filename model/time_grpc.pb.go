// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: model/time.proto

package timenow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeServerClient is the client API for TimeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeServerClient interface {
	TimeNow(ctx context.Context, opts ...grpc.CallOption) (TimeServer_TimeNowClient, error)
	Hello(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Response, error)
}

type timeServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeServerClient(cc grpc.ClientConnInterface) TimeServerClient {
	return &timeServerClient{cc}
}

func (c *timeServerClient) TimeNow(ctx context.Context, opts ...grpc.CallOption) (TimeServer_TimeNowClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimeServer_ServiceDesc.Streams[0], "/timenow.TimeServer/TimeNow", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeServerTimeNowClient{stream}
	return x, nil
}

type TimeServer_TimeNowClient interface {
	Send(*Response) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type timeServerTimeNowClient struct {
	grpc.ClientStream
}

func (x *timeServerTimeNowClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *timeServerTimeNowClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *timeServerClient) Hello(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/timenow.TimeServer/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeServerServer is the server API for TimeServer service.
// All implementations must embed UnimplementedTimeServerServer
// for forward compatibility
type TimeServerServer interface {
	TimeNow(TimeServer_TimeNowServer) error
	Hello(context.Context, *Response) (*Response, error)
	mustEmbedUnimplementedTimeServerServer()
}

// UnimplementedTimeServerServer must be embedded to have forward compatible implementations.
type UnimplementedTimeServerServer struct {
}

func (UnimplementedTimeServerServer) TimeNow(TimeServer_TimeNowServer) error {
	return status.Errorf(codes.Unimplemented, "method TimeNow not implemented")
}
func (UnimplementedTimeServerServer) Hello(context.Context, *Response) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedTimeServerServer) mustEmbedUnimplementedTimeServerServer() {}

// UnsafeTimeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeServerServer will
// result in compilation errors.
type UnsafeTimeServerServer interface {
	mustEmbedUnimplementedTimeServerServer()
}

func RegisterTimeServerServer(s grpc.ServiceRegistrar, srv TimeServerServer) {
	s.RegisterService(&TimeServer_ServiceDesc, srv)
}

func _TimeServer_TimeNow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TimeServerServer).TimeNow(&timeServerTimeNowServer{stream})
}

type TimeServer_TimeNowServer interface {
	Send(*Response) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type timeServerTimeNowServer struct {
	grpc.ServerStream
}

func (x *timeServerTimeNowServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *timeServerTimeNowServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TimeServer_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Response)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServerServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timenow.TimeServer/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServerServer).Hello(ctx, req.(*Response))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeServer_ServiceDesc is the grpc.ServiceDesc for TimeServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timenow.TimeServer",
	HandlerType: (*TimeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _TimeServer_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TimeNow",
			Handler:       _TimeServer_TimeNow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "model/time.proto",
}
